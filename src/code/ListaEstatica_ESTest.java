/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 27 01:16:17 GMT 2021
 */

package code;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ListaEstatica_ESTest extends ListaEstatica_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(919);
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(919);
      listaEstatica0.inserirFim(integer0);
      listaEstatica0.inserirInicio(integer0);
      listaEstatica0.remover(integer0);
      assertFalse(listaEstatica0.isVazia());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(1852);
      Integer integer0 = new Integer(2090);
      listaEstatica0.inserirInicio(integer0);
      Integer integer1 = new Integer((-2226));
      listaEstatica0.inserirInicio(integer1);
      listaEstatica0.remover(integer0);
      assertFalse(listaEstatica0.isVazia());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(2177);
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(2177);
      listaEstatica0.inserirInicio(integer0);
      listaEstatica0.inserirInicio(integer0);
      listaEstatica0.removerFinal();
      assertEquals(1, listaEstatica0.getQuantidade());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(919);
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(919);
      listaEstatica0.inserirFim(integer0);
      listaEstatica0.inserirInicio(integer0);
      listaEstatica0.inserirInicio(integer0);
      assertEquals(3, listaEstatica0.getQuantidade());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(1371);
      listaEstatica0.inserirInicio(listaEstatica0);
      listaEstatica0.removerFinal();
      assertTrue(listaEstatica0.isVazia());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(4258);
      Object object0 = new Object();
      Object object1 = new Object();
      listaEstatica0.inserirInicio(object1);
      listaEstatica0.inserirFim(object0);
      int int0 = listaEstatica0.pesquisar(object0);
      assertEquals(2, listaEstatica0.getQuantidade());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(919);
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(919);
      listaEstatica0.inserirFim(integer0);
      int int0 = listaEstatica0.getQuantidade();
      assertFalse(listaEstatica0.isVazia());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(1151);
      listaEstatica0.inserirInicio((Object) null);
      // Undeclared exception!
      try { 
        listaEstatica0.remover((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(1);
      listaEstatica0.inserirInicio(listaEstatica0);
      // Undeclared exception!
      try { 
        listaEstatica0.remover(listaEstatica0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = null;
      try {
        listaEstatica0 = new ListaEstatica<Object>((-1044));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1044
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(4258);
      Object object0 = new Object();
      listaEstatica0.inserirFim(object0);
      int int0 = listaEstatica0.pesquisar(object0);
      assertFalse(listaEstatica0.isVazia());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(527);
      boolean boolean0 = listaEstatica0.isCheia();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(0);
      boolean boolean0 = listaEstatica0.isCheia();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(2128);
      listaEstatica0.inserirInicio((Integer) null);
      listaEstatica0.removerFinal();
      boolean boolean0 = listaEstatica0.isVazia();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(4258);
      Object object0 = new Object();
      listaEstatica0.inserirFim(object0);
      boolean boolean0 = listaEstatica0.isVazia();
      assertEquals(1, listaEstatica0.getQuantidade());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(919);
      int int0 = listaEstatica0.getQuantidade();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(2128);
      listaEstatica0.inserirInicio((Integer) null);
      Integer integer0 = listaEstatica0.removerFinal();
      ListaEstatica<Object> listaEstatica1 = new ListaEstatica<Object>(2128);
      try { 
        listaEstatica1.remover(integer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(1446);
      try { 
        listaEstatica0.removerInicio();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(2128);
      listaEstatica0.inserirInicio((Integer) null);
      Integer integer0 = listaEstatica0.removerFinal();
      Integer integer1 = new Integer(2128);
      listaEstatica0.inserirInicio((Integer) null);
      listaEstatica0.inserirFim(integer1);
      listaEstatica0.removerInicio();
      int int0 = listaEstatica0.pesquisar(integer0);
      assertEquals(1, listaEstatica0.getQuantidade());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(2128);
      listaEstatica0.inserirInicio((Integer) null);
      Integer integer0 = listaEstatica0.removerFinal();
      listaEstatica0.inserirInicio((Integer) null);
      // Undeclared exception!
      try { 
        listaEstatica0.pesquisar(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(2090);
      Object object0 = new Object();
      listaEstatica0.inserirInicio(object0);
      listaEstatica0.getElements();
      assertEquals(1, listaEstatica0.getQuantidade());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(0);
      Object object0 = new Object();
      try { 
        listaEstatica0.inserirFim(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ListaEstatica<Object> listaEstatica0 = new ListaEstatica<Object>(0);
      try { 
        listaEstatica0.inserirInicio(listaEstatica0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.ListaEstatica", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListaEstatica<Integer> listaEstatica0 = new ListaEstatica<Integer>(2128);
      try { 
        listaEstatica0.removerFinal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("code.ListaEstatica", e);
      }
  }
}
